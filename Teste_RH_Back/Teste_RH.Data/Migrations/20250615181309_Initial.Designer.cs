// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Teste_RH.Data.Contexts;

#nullable disable

namespace Teste_RH.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250615181309_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Teste_RH.Core.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AdministratorDocumentNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("administrator_document_number");

                    b.Property<string>("AdministratorName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("administrator_name");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company_name");

                    b.Property<string>("CompanyType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company_type");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("document_number");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insert_date");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mobile_phone");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_companies_user_id");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("Teste_RH.Core.Entities.CompanyAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("AddressComplement")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address_complement");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insert_date");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("neighborhood");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("pk_company_addresses");

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasDatabaseName("ix_company_addresses_company_id");

                    b.ToTable("company_addresses", (string)null);
                });

            modelBuilder.Entity("Teste_RH.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("full_name");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insert_date");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password_hash");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Teste_RH.Core.Entities.Company", b =>
                {
                    b.HasOne("Teste_RH.Core.Entities.User", "User")
                        .WithOne("Company")
                        .HasForeignKey("Teste_RH.Core.Entities.Company", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_companies_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Teste_RH.Core.Entities.CompanyAddress", b =>
                {
                    b.HasOne("Teste_RH.Core.Entities.Company", "Company")
                        .WithOne("Address")
                        .HasForeignKey("Teste_RH.Core.Entities.CompanyAddress", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_addresses_companies_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Teste_RH.Core.Entities.Company", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("Teste_RH.Core.Entities.User", b =>
                {
                    b.Navigation("Company");
                });
#pragma warning restore 612, 618
        }
    }
}
